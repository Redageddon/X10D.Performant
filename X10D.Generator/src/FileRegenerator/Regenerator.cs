namespace X10D.Generator.FileRegenerator;

public class Regenerator
{
    private static void Regenerate(string startingPath, string endingPath, string[] selectedWords, string[] replacedWords)
    {
        if (selectedWords.Length != replacedWords.Length)
        {
            throw new ArgumentOutOfRangeException(nameof(selectedWords) + " and " + nameof(replacedWords),
                                                  "replacements should have the same amount of elements.");
        }

        string contents = File.ReadAllText(startingPath);

        for (int i = 0; i < selectedWords.Length; i++)
        {
            contents = contents.Replace(selectedWords[i], replacedWords[i]);
        }

        if (Path.GetExtension(endingPath) == ".xml")
        {
            contents = "<!--" + Program.AutoGeneratedString1 + Environment.NewLine + Program.AutoGeneratedString2 + "-->" + Environment.NewLine + Environment.NewLine + contents;
        }
        else
        {
            contents = "/*" + Program.AutoGeneratedString1 + Environment.NewLine + Program.AutoGeneratedString2 + "*/" + Environment.NewLine + Environment.NewLine + contents;
        }

        File.WriteAllText(endingPath, contents);
    }

    public void RegenerateIntegerExtensions()
    {
        string ulongPath = Path.Combine(Program.CustomPath, "IntegerExtensions", "UInt64Extensions/");
        string uintPath = Path.Combine(Program.CustomPath, "IntegerExtensions", "UInt32Extensions/");
        string ushortPath = Path.Combine(Program.CustomPath, "IntegerExtensions", "UInt16Extensions/");
        string sbytePath = Path.Combine(Program.CustomPath, "IntegerExtensions", "SByteExtensions/");
        string longPath = Path.Combine(Program.CustomPath, "IntegerExtensions", "Int64Extensions/");
        string intPath = Path.Combine(Program.CustomPath, "IntegerExtensions", "Int32Extensions/");
        string shortPath = Path.Combine(Program.CustomPath, "IntegerExtensions", "Int16Extensions/");
        string bytePath = Path.Combine(Program.CustomPath, "IntegerExtensions", "ByteExtensions/");

        #region BooleanConversions

        string startingPath = Path.Combine(ulongPath, "BooleanConversions.cs");

        Regenerate(startingPath,
                   Path.Combine(uintPath, "BooleanConversions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "uint", "UInt32", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(ushortPath, "BooleanConversions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "ushort", "UInt16", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(sbytePath, "BooleanConversions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "sbyte", "SByte", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(longPath, "BooleanConversions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "long", "Int64", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(intPath, "BooleanConversions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "int", "Int32", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(shortPath, "BooleanConversions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "short", "Int16", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(bytePath, "BooleanConversions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "byte", "Byte", ".g.xml" });

        #endregion

        #region Extensions

        startingPath = Path.Combine(ulongPath, "UInt64Extensions.cs");

        Regenerate(startingPath,
                   Path.Combine(uintPath, "UInt32Extensions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "uint", "UInt32", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(ushortPath, "UInt16Extensions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "ushort", "UInt16", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(sbytePath, "SByteExtensions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "sbyte", "SByte", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(longPath, "Int64Extensions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "long", "Int64", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(intPath, "Int32Extensions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "int", "Int32", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(shortPath, "Int16Extensions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "short", "Int16", ".g.xml" });

        Regenerate(startingPath,
                   Path.Combine(bytePath, "ByteExtensions.g.cs"),
                   new[] { "ulong", "UInt64", ".xml" },
                   new[] { "byte", "Byte", ".g.xml" });

        #endregion

        #region Xmlg

        Regenerate(Path.Combine(ulongPath, "UInt64Extensions.xml"),
                   Path.Combine(uintPath, "UInt32Extensions.g.xml"),
                   new[] { "ulong" },
                   new[] { "uint" });

        Regenerate(Path.Combine(ulongPath, "UInt64Extensions.xml"),
                   Path.Combine(ushortPath, "UInt16Extensions.g.xml"),
                   new[] { "ulong" },
                   new[] { "ushort" });

        Regenerate(Path.Combine(ulongPath, "UInt64Extensions.xml"),
                   Path.Combine(sbytePath, "SByteExtensions.g.xml"),
                   new[]
                   {
                       "ulong", @"
        <param name=""useCache"">Gives the user the ability to use a cache of type <see cref=""System.Collections.Generic.HashSet{T}""/>.</param>",
                   },
                   new[] { "sbyte", "" });

        Regenerate(Path.Combine(ulongPath, "UInt64Extensions.xml"),
                   Path.Combine(longPath, "Int64Extensions.g.xml"),
                   new[] { "ulong" },
                   new[] { "long" });

        Regenerate(Path.Combine(ulongPath, "UInt64Extensions.xml"),
                   Path.Combine(intPath, "Int32Extensions.g.xml"),
                   new[] { "ulong" },
                   new[] { "int" });

        Regenerate(Path.Combine(ulongPath, "UInt64Extensions.xml"),
                   Path.Combine(shortPath, "Int16Extensions.g.xml"),
                   new[] { "ulong" },
                   new[] { "short" });

        Regenerate(Path.Combine(ulongPath, "UInt64Extensions.xml"),
                   Path.Combine(bytePath, "ByteExtensions.g.xml"),
                   new[]
                   {
                       "ulong", @"
        <param name=""useCache"">Gives the user the ability to use a cache of type <see cref=""System.Collections.Generic.HashSet{T}""/>.</param>",
                   },
                   new[] { "byte", "" });

        #endregion
    }

    public void RegenerateSingleExtensions()
    {
        string doublePath = Path.Combine(Program.CustomPath, "DecimalExtensions", "DoubleExtensions");
        string singlePath = Path.Combine(Program.CustomPath, "DecimalExtensions", "SingleExtensions");

        Directory.CreateDirectory(singlePath);
        Directory.CreateDirectory(Path.Combine(singlePath, "UnitConversions"));

        string[] selectedWords = { "double", "Double", "Math", "D ", "D;", "D)", ".xml" };
        string[] replacedWords = { "float", "Single", "MathF", "F ", "F;", "F)", ".g.xml" };

        Regenerate(Path.Combine(doublePath, "DoubleExtensions.cs"),
                   Path.Combine(singlePath, "SingleExtensions.g.cs"),
                   selectedWords,
                   replacedWords);

        Regenerate(Path.Combine(doublePath, "Lerp.cs"),
                   Path.Combine(singlePath, "Lerp.g.cs"),
                   selectedWords,
                   replacedWords);

        Regenerate(Path.Combine(doublePath, "UnitConversions", "Angle.cs"),
                   Path.Combine(singlePath, "UnitConversions", "Angle.g.cs"),
                   selectedWords,
                   replacedWords);

        Regenerate(Path.Combine(doublePath, "UnitConversions", "Temperature.cs"),
                   Path.Combine(singlePath, "UnitConversions", "Temperature.g.cs"),
                   selectedWords,
                   replacedWords);

        Regenerate(Path.Combine(doublePath, "DoubleExtensions.xml"),
                   Path.Combine(singlePath, "SingleExtensions.g.xml"),
                   new[] { "double", "Double" },
                   new[] { "float", "Single" });
    }
}