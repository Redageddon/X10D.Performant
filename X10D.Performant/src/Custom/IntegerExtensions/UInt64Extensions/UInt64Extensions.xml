<members>
    <member name="ModPow">
        <summary>
            Performs a fast and overflow proof modular exponentiation.
        </summary>
        <param name="value">The value being raised.</param>
        <param name="exponent">The value that is raising.</param>
        <param name="modulus">The modulo to be applied to the result.</param>
        <returns><paramref name="value"/> raised by <paramref name="exponent"/> and then modded by <paramref name="modulus"/>.</returns>
    </member>
    <member name="IsPrime">
        <summary>
            Determines if the <paramref name="value"/> is a prime value.
        </summary>
        <param name="value">An integer value.</param>
        <param name="useCache">Gives the user the ability to use cache of type <see cref="HashSet{T}"/>.</param>
        <returns><see langword="true"/> if <paramref name="value"/> is prime, <see langword="false"/> otherwise.</returns>
    </member>
    <member name="FromUnixTimestamp">
        <summary>
            Converts the <paramref name="timestamp"/> to a <see cref="DateTime"/> treating it as a Unix timestamp.
        </summary>
        <param name="timestamp">The timestamp.</param>
        <param name="isMilliseconds">
            Whether or not the input value should be treated as milliseconds. Defaults to <see langword="false"/>.
        </param>
        <returns>A <see cref="DateTime"/> representing <paramref name="timestamp"/> seconds since the Unix epoch.</returns>
    </member>
    <member name="IsEven">
        <summary>
            Determines if the <paramref name="value"/> is even.
        </summary>
        <param name="value">An unsigned integer value.</param>
        <returns><see langword="true"/> if <paramref name="value"/> is even, <see langword="false"/> otherwise.</returns>
    </member>
    <member name="IsOdd">
        <summary>
            Determines if the <paramref name="value"/> is odd.
        </summary>
        <param name="value">An unsigned integer value.</param>
        <returns><see langword="true"/> if <paramref name="value"/> is odd, <see langword="false"/> otherwise.</returns>
    </member>
    <member name="Mod">
        <summary>
            Returns the remainder of <paramref name="value"/> / <paramref name="modulus"/>.
        </summary>
        <param name="value">The dividend.</param>
        <param name="modulus">The divisor.</param>
        <returns>The remainder of <paramref name="value"/> / <paramref name="modulus"/>.</returns>
        <remarks>
            TODO https://github.com/dotnet/runtime/issues/5213:
            Restore to using % and / when the JIT is able to eliminate one of the idivs.
            In the meantime, a * and - is measurably faster than an extra /.
        </remarks>
    </member>
    <member name="ToBoolean">
        <summary>
            Gets a <see cref="bool"/> value that represents this value.
        </summary>
        <param name="value">An unsigned integer value.</param>
        <returns><see langword="false"/> if <paramref name="value"/> is 0, <see langword="true"/> otherwise.</returns>
    </member>
</members>